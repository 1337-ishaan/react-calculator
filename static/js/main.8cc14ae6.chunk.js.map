{"version":3,"sources":["Engine.js","Display.js","Button.js","Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Engine","Object","classCallCheck","this","number","previousInput","previousNumber","previousOperation","repeatNumber","repeatOperation","clearable","OperationEnum","addition","subtraction","multiplication","division","percentage","sign","equal","allClear","clear","input","isOperation","containDecimalPoint","removeZero","handleBaiscMathOperation","handlePercentageOperation","handleSignOperation","handleAllClearOperation","handleClearOperation","handleEqualOperation","updatePreviousStatus","temp","add","subtract","muliply","divide","changeSign","operation","perform","isDigit","handleDigitInput","handleOperationInput","isNaN","values","includes","parseFloat","toString","length","substr","Display","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","display","width","window","divRef","React","createRef","spanRef","previousWidth","setState","objectSpread","innerWidth","addEventListener","updateDimensions","bind","removeEventListener","getComputedStyle","current","getPropertyValue","clientWidth","style","fontSize","getFontSize","reduceFontSize","react_default","a","createElement","ref","className","divWidth","resetFontSize","Component","Button","onClick","value","Calculator","engine","handleButtonClick","assertThisInitialized","calculate","src_Display_0","src_Button_0","App","src_Calculator_0","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8cc14ae6.chunk.js","sourcesContent":["class Engine {\n\n    constructor(){\n        \n        this.number = '';\n\n        this.previousInput = null;\n\n        this.previousNumber = null;\n\n        this.previousOperation = null;\n\n        this.repeatNumber = null;\n\n        this.repeatOperation = null;\n\n        this.clearable = false;\n\n        this.OperationEnum = {\n            addition: '+', \n            subtraction: '-', \n            multiplication: 'x', \n            division: '\\u00F7',\n            percentage: '%',\n            sign: '+/-', \n            equal: '=',\n            allClear: 'AC',\n            clear: 'C'\n        };  \n\n    }\n\n    updatePreviousStatus(number, input){\n\n        this.previousNumber = number;\n        this.previousInput = input; \n        this.previousOperation = input;\n\n    }\n\n    // Handle and process all digit inputs including . \n    handleDigitInput(input){\n\n        this.clearable = true;\n\n        if(this.isOperation(this.previousInput)){\n\n            this.number = '';\n\n        }\n\n        if(input === '.' && this.containDecimalPoint(this.number)){\n\n            return this.number;\n\n        }\n\n        if(input === '.' && this.number === ''){\n\n            this.number = '0.';\n\n            return this.number;\n\n        }\n\n        this.number += input;\n\n        this.previousInput = input;\n\n        return this.removeZero(this.number);        \n\n    }\n\n    // Handle all operation other than digit inputs.    \n    handleOperationInput(input){\n\n        if(input === this.OperationEnum.addition \n            || input === this.OperationEnum.subtraction \n            || input === this.OperationEnum.multiplication\n            || input === this.OperationEnum.division){\n\n            return this.handleBaiscMathOperation(input);\n\n        }\n\n        if(input === this.OperationEnum.percentage){\n\n            return this.handlePercentageOperation();\n\n        }\n\n        if(input === this.OperationEnum.sign){\n\n            return this.handleSignOperation();\n\n        }\n\n        if(input === this.OperationEnum.allClear){\n\n            return this.handleAllClearOperation();\n\n        }\n\n        if(input === this.OperationEnum.clear){\n\n            return this.handleClearOperation();\n\n        }\n\n        if(input === this.OperationEnum.equal) {\n\n            return this.handleEqualOperation(input);\n\n        }\n\n    }\n\n    // Only handle basic +, -, /, x operations\n    handleBaiscMathOperation(input){\n\n        this.repeatNumber = null;\n        this.repeatOperation = null;\n\n        if(this.previousNumber == null){\n\n            this.updatePreviousStatus(this.number, input);\n\n            return this.number;\n\n        } else {\n\n            let temp = this.previousInput;\n            this.previousInput = input;\n\n            if(temp !== input && this.previousOperation !== this.OperationEnum.equal && temp !== '='){\n                \n                if(this.previousOperation === this.OperationEnum.addition){\n                    this.number = this.add(this.previousNumber, this.number);\n                }\n                if(this.previousOperation === this.OperationEnum.subtraction){\n                    this.number = this.subtract(this.previousNumber, this.number);\n                }\n                if(this.previousOperation === this.OperationEnum.multiplication){\n                    this.number = this.muliply(this.previousNumber, this.number);\n                }\n                if(this.previousOperation === this.OperationEnum.division){\n                    this.number = this.divide(this.previousNumber, this.number);\n                }\n\n                this.updatePreviousStatus(this.number, input);\n\n                return this.number;\n\n            } else {\n\n                this.updatePreviousStatus(this.number, input);\n\n                return this.number;\n\n            }\n        }\n\n    }\n\n    handlePercentageOperation(){\n\n        if(this.number === ''){\n            this.number = '0';\n        }\n\n        this.number = this.percentage(this.number);\n\n        return this.number;\n\n    }\n\n    handleSignOperation(){\n\n        if(this.number === ''){\n            this.number = '0';\n        }\n\n        this.number = this.changeSign(this.number);\n\n        return this.number;\n\n    }\n\n    handleAllClearOperation(){\n\n        return this.allClear();\n\n    }\n\n    handleClearOperation(){\n\n        return this.clear();\n\n    }\n\n    // Paramter operation is one of add, subtract, multiply or divide\n    perform(operation){\n\n        if(this.repeatNumber !== null){\n            this.number = operation(this.number, this.repeatNumber);    \n        } else {\n            this.repeatNumber = this.number;    \n            this.number = operation(this.previousNumber, this.number);\n        }       \n\n    }\n\n    handleEqualOperation(input){\n\n        if(this.previousNumber == null){\n\n            this.updatePreviousStatus(this.number, input);\n\n            return this.number;\n\n        } else {\n            \n            this.previousInput = input;\n\n            if(this.previousOperation !== this.OperationEnum.equal && input === this.OperationEnum.equal){  \n                \n                let temp = this.number;\n\n                if(this.previousOperation === this.OperationEnum.addition){\n                    this.perform(this.add);\n                }\n                if(this.previousOperation === this.OperationEnum.subtraction){\n                    this.perform(this.subtract);\n                }\n                if(this.previousOperation === this.OperationEnum.multiplication){\n                    this.perform(this.muliply);\n                }\n                if(this.previousOperation === this.OperationEnum.division){\n                    this.perform(this.divide);\n                }\n\n                this.repeatNumber = temp;\n                this.repeatOperation = this.previousOperation;\n                this.previousInput = input; \n                this.previousOperation = input;\n\n                return this.number;\n\n            } else {\n\n                let temp = this.number;\n\n                if(this.repeatNumber != null){\n\n                    if(this.repeatOperation === this.OperationEnum.addition){\n                        this.number = this.add(this.number, this.repeatNumber); \n                    }\n                    if(this.repeatOperation === this.OperationEnum.subtraction){\n                        this.number = this.subtract(this.number, this.repeatNumber);    \n                    }\n                    if(this.repeatOperation === this.OperationEnum.multiplication){\n                        this.number = this.muliply(this.number, this.repeatNumber); \n                    }\n                    if(this.repeatOperation === this.OperationEnum.division){\n                        this.number = this.divide(this.number, this.repeatNumber);  \n                    }\n\n                }\n\n                this.updatePreviousStatus(temp, input);\n\n                return this.number;\n\n            }\n\n        }\n\n    }\n\n    calculate(input){\n\n        if(this.isDigit(input)){\n\n            return this.handleDigitInput(input);\n\n        }\n\n        if(this.isOperation(input)){\n            \n            return this.handleOperationInput(input);\n            \n        }\n\n        return 'Error';\n\n    }\n\n    isDigit(input){\n\n        return !isNaN(input) || input === '.';\n\n    }\n\n    isOperation(input){\n\n        return Object.values(this.OperationEnum).includes(input);\n\n    }\n\n    add(previousNumber, number){\n\n        return (parseFloat(previousNumber) + parseFloat(number)).toString();\n\n    }\n\n    subtract(previousNumber, number){\n\n        return (parseFloat(previousNumber) - parseFloat(number)).toString();\n\n    }\n\n    muliply(previousNumber, number){\n\n        return (parseFloat(previousNumber) * parseFloat(number)).toString();\n\n    }\n\n    divide(previousNumber, number){\n\n        return (parseFloat(previousNumber) / parseFloat(number)).toString();\n\n    }\n\n    percentage(number){\n\n        return (parseFloat(number) / 100).toString();\n\n    }\n\n    changeSign(number){\n\n        return parseFloat(number) === 0 ? '0' : (parseFloat(number) * -1).toString();\n\n    }\n\n    clear(){\n\n        this.previousInput = null;\n\n        this.previousNumber = null;\n\n        this.previousOperation = null;\n\n        this.repeatNumber = null;\n\n        this.repeatOperation = null;\n\n        this.clearable = false;\n\n        return this.number;\n\n    }\n\n    allClear(){\n\n        this.number = '';\n\n        this.previousInput = null;\n\n        this.previousNumber = null;\n\n        this.previousOperation = null;\n\n        this.repeatNumber = null;\n\n        this.repeatOperation = null;\n\n        this.clearable = false;\n\n        return '0';\n\n    }\n\n    removeZero(number){\n\n        if(number.length > 1 && number[0] === '0' && number[1] !== '.'){\n\n            return this.removeZero(number.substr(1, number.length));\n\n        }\n\n        return number;\n\n    }\n\n    containDecimalPoint(number){\n\n        return number.includes('.');\n\n    }\n\n}\n\nexport default Engine;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Display.css';\n\nclass Display extends React.Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.state = {display: props.display, width: window.width};\n\n        this.divRef = React.createRef();\n\n        this.spanRef = React.createRef();\n\n        this.previousWidth = window.width;\n\n    }\n\n    updateDimensions() {\n        \n        this.setState({...this.state, width: window.innerWidth});\n        \n    }\n\n    componentDidMount() {\n        \n        window.addEventListener('resize', this.updateDimensions.bind(this));\n\n    }\n\n    componentWillUnmount() {\n\n        window.removeEventListener('resize', this.updateDimensions.bind(this));\n\n    }\n\n    getFontSize(){\n\n        return parseFloat(window.getComputedStyle(this.divRef.current, null).getPropertyValue('font-size'));\n\n    }\n\n    reduceFontSize(){\n\n        if(this.divRef.current.clientWidth > this.spanRef.current.clientWidth + 40){\n            return;\n        }\n\n        this.divRef.current.style.fontSize = this.getFontSize() - 10 + 'px';\n\n        this.reduceFontSize();                \n\n    }\n\n    resetFontSize(){\n\n        this.divRef.current.style.fontSize = '14vmin';\n\n    }\n\n    render() {\n\n        return (\n            <div ref={ this.divRef} className=\"Display\">\n                <span ref={ this.spanRef } className=\"DisplaySpan\">{this.props.display}</span>\n            </div>\n        );\n\n    }\n\n     componentDidUpdate() {\n\n        let divWidth = this.divRef.current.clientWidth;\n\n        this.resetFontSize();\n\n        this.reduceFontSize();\n\n        this.previousWidth = divWidth;\n\n    }\n\n}\n\nDisplay.propTypes = {\n    display: PropTypes.string\n};\n\nexport default Display;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Button.css';\n\nclass Button extends React.Component {\n  \n    render() {\n        return (\n            <button className={this.props.className} onClick={this.props.onClick.bind(null, this.props.value)}>\n                {this.props.value}\n            </button>\n        );\n    }   \n\n}\n\nButton.propTypes = {\n    onClick: PropTypes.func,\n    value: PropTypes.string,\n    className: PropTypes.string\n};\n\nexport default Button;","import React from 'react';\n\nimport Engine from './Engine.js';\n\nimport Display from './Display.js';\nimport Button from './Button.js';\n\nimport './Calculator.css';\n\nclass Calculator extends React.Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n            display: '0',\n            engine: new Engine(),\n        };\n\n        this.handleButtonClick = this.handleButtonClick.bind(this);\n\n    }\n  \n    handleButtonClick(value) {\n\n        this.setState({\n            display: this.state.engine.calculate(value)\n        });\n\n    }\n\n    render() {\n\n        return (\n\n            <div className=\"Calculator\">\n\n                <Display display={this.state.display} />\n\n                <Button value={this.state.engine.clearable ? 'C' : 'AC'} className=\"Button BlackButton\" onClick={this.handleButtonClick} />\n                <Button value=\"+/-\" className=\"Button BlackButton\" onClick={this.handleButtonClick} />\n                <Button value=\"%\" className=\"Button BlackButton\" onClick={this.handleButtonClick} />\n                <Button value={'\\u00F7'} className=\"Button OrangeButton\" onClick={this.handleButtonClick} />\n\n                <br />\n\n                <Button value=\"7\" className=\"Button GrayButton\" onClick={this.handleButtonClick} />\n                <Button value=\"8\" className=\"Button GrayButton\" onClick={this.handleButtonClick} />\n                <Button value=\"9\" className=\"Button GrayButton\" onClick={this.handleButtonClick} />\n                <Button value=\"x\" className=\"Button OrangeButton\" onClick={this.handleButtonClick} />\n\n                <br />\n\n                <Button value=\"4\" className=\"Button GrayButton\" onClick={this.handleButtonClick} />\n                <Button value=\"5\" className=\"Button GrayButton\" onClick={this.handleButtonClick} />\n                <Button value=\"6\" className=\"Button GrayButton\" onClick={this.handleButtonClick} />\n                <Button value=\"-\" className=\"Button OrangeButton\" onClick={this.handleButtonClick} />\n\n                <br />\n\n                <Button value=\"1\" className=\"Button GrayButton\" onClick={this.handleButtonClick} />\n                <Button value=\"2\" className=\"Button GrayButton\" onClick={this.handleButtonClick} />\n                <Button value=\"3\" className=\"Button GrayButton\" onClick={this.handleButtonClick} />\n                <Button value=\"+\" className=\"Button OrangeButton\" onClick={this.handleButtonClick} />\n\n                <br />\n\n                <Button value=\"0\" className=\"Button GrayButton LargeButton\" onClick={this.handleButtonClick} />\n                <Button value=\".\" className=\"Button GrayButton\" onClick={this.handleButtonClick} />\n                <Button value=\"=\" className=\"Button OrangeButton\" onClick={this.handleButtonClick} />\n\n\n            </div>\n\n        );\n    }\n\n}\n\nexport default Calculator;","import React from 'react';\nimport './App.css';\n\nimport Calculator from './Calculator.js';\n\nfunction App() {\n    return (\n        <Calculator />\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}